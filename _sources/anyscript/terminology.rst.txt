
Terminology
*********************************************

The first and most obvious thing you may have noticed already, is that a
lot of things are called 'Any'-something. You may come to like this or
hate it, but anyway there are good reasons for this choice of
terminology.

The principle is that the names of all data types (i.e. all class names)
start with 'Any'. The historical reason is that they are the classes of
the AnyBody modeling language, and the name 'AnyBody' implies that it is a
system for making models of any body, be it a human, a dog, or a
dinosaur. Similarly, you may think of a class as the basis for making
any object of that type; for instance the base class for any type of
object is called :ref:`AnyObject`, i.e., all objects are also AnyObjects. The
practical reason for this standardization of the class names is that it
makes class names easy to distinguish from object names and other
identifiers. It provides a primitive form of syntax highlighting, which
was particularly nice in earlier versions of AnyBody where color highlighting
in the AnyScript™ editor did not exist.

If you get tired of the many Any’ies, you can often skip them in oral
communication without losing the meaning. Even in this manual you will find us
speaking of objects, folders, segments, etc. even though it would be more
strictly correct to speak of objects of the types :ref:`AnyObject`,
:ref:`AnyFolder`, and :ref:`AnySeg`.

The remaining part of this section contains brief explanations of terms
that will be used frequently while describing the details of the
AnyScript™ language.


Classes and objects
--------------------------

.. glossary::

    Objects
        Objects are the actual elements you create/define by the AnyScript™ declarations. They
        are also referred to as the instances of the classes, i.e., you can
        have many objects (instances) of the same class.

    Classes
        A class is an object type specification. Classes can be derived from
        other classes whereby they inherit properties from the class they are
        derived from. Typically they add more properties to inherited ones in
        order for their existence to be justified. In AnyScript™ all classes are
        derived from one class, which implies that all classes can be
        organized in a tree with one root according to their derivation.
        There are three categories of classes in AnyScript™:

    Creatable classes
        are the classes you can actually use, meaning that you can define
        objects of these classes.

    Abstract classes
        Objects of abstract classes cannot be declared in AnyScript™. They lack some
        of the information necessary to be fully operational entities.
        Their purpose is to provide some kinship between derived classes,
        so they are typically found high in the class hierarchy.

    Hidden classes
        are classes that primarily exist for convenient organization of
        the program’s functionality. Knowledge about these will be of
        little relevance to the standard user.

    Class Templates
        Are AnyScript™ defined templates for a class. In principle, Class Templates are
        not real classes, like the built-in AnyScript™ classes, but they do indeed work
        almost like the real classes. Since the Class Templates can be
        defined in AnyScript™ code, they can be defined by the user. See more info: :ref:`class_templates`.

    Class Hierarchy
        is the tree of classes ordered according to the inheritance. In
        relation to the relative location of classes in the tree, the
        following terms are used:

    Parent class or base class
        are names for the class a given class is derived from. The parent
        or base class is the root in a tree of all the classes derived
        from it.

    Child or derived class
        are names for the classes that are derived from another class, the
        base class.



Object hierarchy (Model tree)
----------------------------------------

There are in principle two types of
objects: those that can contain others and those that cannot. The
former are the nodes of the model tree and the latter the leaves.

The basic classes of these two kinds are the :ref:`AnyFolder`, which can
contain other objects, and :ref:`AnyValue`, which is parent of all classes
that hold values, i.e., basic data. :ref:`AnyFolder` is the parent of most
classes because any modeling object typically hold data for user
input and output of results; this is what makes the functionality of
the class accessible.

The following are terms related to describe object
relationship in the object/model tree:

.. glossary::

    Model tree
        Is a map of the existing objects in a
        model and it can be browsed in the user interface of the system after
        proper loading of the model in AnyBody.

    Owners
        are the objects that contain other objects. This implies that an
        owner is of the class AnyFolder or derived from AnyFolder.

    Members
        are the objects defined inside a given object, i.e., the owner.

    Properties
        are the values stored in members, so we may speak of the
        properties of a given class (the owner of the property-holding
        member), for instance the mass of a segment. This implies that
        properties are stored in classes that are derived from AnyValue.

Folder Scopes
--------------
   AnyScript™ files are divided into scopes delimited by braces, ``{`` and ``}``. The
   scope of a folder is opened by ``<foldername> = {``  and closed by ``}``.

   The scope of a folder can contain initialization of existing members
   and declarations of new members, i.e., initialization for the folder.
   The folder scope can be thought of as the "value" of a folder.
   General description of the use and access of scopes shall not be
   given here, but a number of special issues regarding scopes shall be
   mentioned below.

.. glossary::

    Main
        is first scope you encounter in an AnyScript™ model. This outer scope is
        where the user defines the model. Main is a special folder that is
        predefined in the system so that it can be filled (initialized)
        without declaration. Therefore, all AnyScript™ models start with the phrase
        ``Main = {``, which open the Main scope for initialization. There
        exists only one Main folder and Main is a restricted keyword.

    Global scope
        is actually the outer most scope which among others contains the
        Main folder. As Main, Global is a special folder, which is
        predefined by the system. The scope of Global is not accessible
        for initialization by the user, but it functions to contain
        predefined objects that the system makes available to the user.

        The access to these objects is facilitated by a special mechanism
        of the AnyScript™ compiler that makes all objects in the Global folder
        available from anywhere in the script, i.e., from any scope. To
        the user it appears as if these global objects exist in all
        scopes. Apart from Main, typical contents of Global is
        mathematical constants and functions.

    Restricted keywords
        are all words that cannot be used for object names. All class
        names are restricted keywords, as well as all names of the members
        of the Global folder. Moreover, all names of predefined members
        appear as restricted keywords in the given scope.

    Object names:
        All objects are identified by names, the object names. An object
        is uniquely identified by its name and the folder it is member of,
        i.e., there can be only one object with a given name in each
        folder. The object name can consist of letters (case sensitive),
        digits (not in the first place) and underscores. Adding the
        identification of the folder in front of the object name, you can
        uniquely refer a given object. This will be covered in more
        details in a following section.

.. Class Operations
.. -----------------
.. It is
.. a special kind of functions (or operations as we shall call them)
.. that are associated with a class and thereby with objects of that
.. class. In C++ you call them member functions; but in AnyScript™ we have both
.. functions and operations as classes (AnyFunction and AnyOperation,
.. please see Section :ref:`section:ImportantClasses`, which
.. implies that we can have members of these classes in an object. This
.. could also be interpreted as member functions or member operations.
.. Therefore, we have come up with a new name for this type of
.. operations that are associated with a object through its class
.. definition. Currently, class operations are not documented in the
.. class reference pages, but you will see them in the AnyBody GUI when you
.. right-click objects in the object tree (i.e. the Model Tree attached
.. to most of AnyBody’s windows). Class operations typically provide some sort
.. of interface between the user and the data in the object. By this
.. mean, objects can be made to supply more information than normally
.. available by just browsing the members of the object.

..    Object Description:
..       The Object Description is the most basic class operation, which is
..       associated with AnyObject and thereby all other classes. It
..       basically prints a message with all sorts of information about the
..       objects. Notice that in AnyBody’s GUI this message will be presented in a
..       special window with active links that enables you to move around
..       in the system according to the information presented. This is a
..       simple, yet powerful source of information about objects.


.. Comments in the code
.. ---------------------
.. Comments in the code is a concept known in all developed programming
.. languages, i.e., text written in the source files that only serve to
.. document the code but without being compiled. In AnyScript™ comments
.. look much like in C++, for a more detailed description see Sections
.. :ref:`section:syntax.Comments and Include Statements`
.. and
.. :ref:`section:syntax.Model Documentation`.
.. In AnyScript™ there are two types of comments.

..    Source code comments
..       are comments documenting the source code as known from most other
..       programming languages. They are completely disregarded by the
..       AnyScript™ compiler and their only objective is to assist the reader of the
..       source code.

..    Documentation Comments
..       are associated with objects in the model. They are clearly marked
..       in the code and they can therefore be read by the AnyScript™ parser and
..       stored together with the objects. Later these comments made by the
..       model programmer can be used by the AnyBody system to assist the user of
..       the model, for instance these comments are included in the
..       description prepared by the Object Description class operation.
..       See Section :ref:`section:syntax.Model Documentation`
..       for more details. There are three ways to make such Documentation
..       Comments:

..       Prefixed Document Comments
..          are placed just before the initialization of an AnyScript™
..          object.

..       Postfixed Document Comments
..          are placed right after the ending ";" of an AnyScript™ object
..          initialization.

..       Scope-fixed Document Comments
..          can be placed anywhere in the middle of the scope of an
..          AnyScript™ object initialization.



