
.. _AnyReacForce:

############
AnyReacForce
############

.. Do not edit this file.
.. It is automatically generated by ``reference/create_pages.py``

:Type: Creatable
:Parent class: :ref:`AnyForceBase`


**************
Description
**************



.. The include file below is not auto genrated. Please edit that to modify the description file
.. for this class.

.. include:: /class-descriptions/AnyReacForce.rst



.. Hack to insure that that an emtpy section deosn't screw
.. with the section levels.

|nbsp|






.. Do not edit this file.
.. It is automatically generated. If you need to alter the demos which are include
.. edit the demos/demos.json file

.. rst-class:: plain

.. list-table:: Demo examples related to AnyReacForce
   :widths: 25 75
   :header-rows: 1

   * - Demo
     - Description
   * - :download:`ClassExamples.AnyForceConstraint </demos/zips/ClassExamples.AnyForceConstraint.zip>`
     - Applying constraints on forces, in particular reaction force.
   * - :download:`ClassExamples.AnyForceMomentMeasure </demos/zips/ClassExamples.AnyForceMomentMeasure.zip>`
     - Measuring forces as 3D point force and moment components.
   * - :download:`ClassExamples.AnyReacForce </demos/zips/ClassExamples.AnyReacForce.zip>`
     - Reaction forces (class AnyReacForce).



.. Do not edit this file.
.. Members are must be modified directly in the AMS source code.



****************
Expected members
****************
.. Do not edit this file.
.. Members are must be modified directly in the AMS source code.



..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    <!--
..

.. _AnyReacForce.AnyKinMeasure:

AnyKinMeasure
================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="AnyKinMeasure">
    <span id="anyreacforce-anykinmeasure" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title"> AnyKinMeasure (0..Inf) </span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#AnyKinMeasure" title="Permalink to this headline">¶</a>
    <span class="member-descr">Kinematic measures that should be used by this object.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyKinMeasure`
    | **Number:** 0..Inf



    Kinematic measures that should be used by this object.

..












*******************************
Optional initialization members
*******************************
 



..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
      <!--
..

viewForce
============


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" >
    
    <h3 class="html-toggle-button" style=""><span class="member-title"> viewForce </span><span class="member-title-equal">=</span><span class="member-title-default"> {} </span><a class="headerlink" href="#viewForce" title="Permalink to this headline">¶</a>
    <span class="member-descr">Drawing object that renders the force.</span>
    </h3>

..



    
    
     

..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    <!--
..

.. _AnyReacForce.viewForce.Visible:

viewForce.Visible
--------------------


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="viewForce.Visible">
    <span id="anyreacforce-viewforce-visible" style=""></span>
    <h4 class="html-toggle-button" style=""><span class="member-title"> &nbsp;&nbsp;.Visible </span><span class="member-title-equal">=</span><span class="member-title-default"> Off </span><a class="headerlink" href="#viewForce.Visible" title="Permalink to this headline">¶</a>
    <span class="member-descr">Visibility setting, which specifies default visibility of the object.</span>
    </h4>

..


    | **Class type:**  :ref:`AnySwitchVar`
    | **Eval moment:** :ref:`RuntimeVar <InsideAMS_EvalMoments>`
    | **Default:** ``Off``

        

    Visibility setting, which specifies default visibility of the object.

..



     

..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.viewForce.Opacity:

viewForce.Opacity
--------------------


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="viewForce.Opacity">
    <span id="anyreacforce-viewforce-opacity" style=""></span>
    <h4 class="html-toggle-button" style=""><span class="member-title"> &nbsp;&nbsp;.Opacity </span><span class="member-title-equal">=</span><span class="member-title-default"> 1.0 </span><a class="headerlink" href="#viewForce.Opacity" title="Permalink to this headline">¶</a>
    <span class="member-descr">Opacity setting, which specifies default opacity of the object.</span>
    </h4>

..


    | **Class type:**  :ref:`AnyVar`
    | **Eval moment:** :ref:`RuntimeVar <InsideAMS_EvalMoments>`
    | **Default:** ``1.0``

        

    Opacity setting, which specifies default opacity of the object.

..



     

..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.viewForce.Pickable:

viewForce.Pickable
---------------------


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="viewForce.Pickable">
    <span id="anyreacforce-viewforce-pickable" style=""></span>
    <h4 class="html-toggle-button" style=""><span class="member-title"> &nbsp;&nbsp;.Pickable </span><span class="member-title-equal">=</span><span class="member-title-default"> On </span><a class="headerlink" href="#viewForce.Pickable" title="Permalink to this headline">¶</a>
    <span class="member-descr">Switch for whether the AnyDrawObject can interacted with by clicking it in a...</span>
    </h4>

..


    | **Class type:**  :ref:`AnySwitchVar`
    | **Eval moment:** :ref:`RuntimeVar <InsideAMS_EvalMoments>`
    | **Default:** ``On``

        

    Switch for whether the AnyDrawObject can interacted with by clicking it in a model view.

..



     

..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.viewForce.PickableZOrdering:

viewForce.PickableZOrdering
------------------------------


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="viewForce.PickableZOrdering">
    <span id="anyreacforce-viewforce-pickablezordering" style=""></span>
    <h4 class="html-toggle-button" style=""><span class="member-title"> &nbsp;&nbsp;.PickableZOrdering </span><span class="member-title-equal">=</span><span class="member-title-default"> 0 </span><a class="headerlink" href="#viewForce.PickableZOrdering" title="Permalink to this headline">¶</a>
    <span class="member-descr">Defines the pick order sorting in the Modelview. Modelview picking order is...</span>
    </h4>

..


    | **Class type:**  :ref:`AnyIntVar`
    | **Eval moment:** :ref:`RuntimeVar <InsideAMS_EvalMoments>`
    | **Default:** ``0``

        

    Defines the pick order sorting in the Modelview. Modelview picking order is resolved by PickableZOrdering before resolving by depth in the viewport.

..



     

..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.viewForce.ShowTotalForces:

viewForce.ShowTotalForces
----------------------------


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="viewForce.ShowTotalForces">
    <span id="anyreacforce-viewforce-showtotalforces" style=""></span>
    <h4 class="html-toggle-button" style=""><span class="member-title"> &nbsp;&nbsp;.ShowTotalForces </span><span class="member-title-equal">=</span><span class="member-title-default"> On </span><a class="headerlink" href="#viewForce.ShowTotalForces" title="Permalink to this headline">¶</a>
    <span class="member-descr">Switch for showing total forces at each RefFrame for the force drawing.</span>
    </h4>

..


    | **Class type:**  :ref:`AnySwitchVar`
    | **Eval moment:** :ref:`ModelSceneVar <InsideAMS_EvalMoments>`
    | **Default:** ``On``

        

    Switch for showing total forces at each RefFrame for the force drawing.

..



     

..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.viewForce.ShowComponentForces:

viewForce.ShowComponentForces
--------------------------------


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="viewForce.ShowComponentForces">
    <span id="anyreacforce-viewforce-showcomponentforces" style=""></span>
    <h4 class="html-toggle-button" style=""><span class="member-title"> &nbsp;&nbsp;.ShowComponentForces </span><span class="member-title-equal">=</span><span class="member-title-default"> Off </span><a class="headerlink" href="#viewForce.ShowComponentForces" title="Permalink to this headline">¶</a>
    <span class="member-descr">Switch for showing component forces at each RefFrame for the force drawing.</span>
    </h4>

..


    | **Class type:**  :ref:`AnySwitchVar`
    | **Eval moment:** :ref:`ModelSceneVar <InsideAMS_EvalMoments>`
    | **Default:** ``Off``

        

    Switch for showing component forces at each RefFrame for the force drawing.

..



     

..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.viewForce.ForceScale:

viewForce.ForceScale
-----------------------


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="viewForce.ForceScale">
    <span id="anyreacforce-viewforce-forcescale" style=""></span>
    <h4 class="html-toggle-button" style=""><span class="member-title"> &nbsp;&nbsp;.ForceScale </span><span class="member-title-equal">=</span><span class="member-title-default"> 0.001 </span><a class="headerlink" href="#viewForce.ForceScale" title="Permalink to this headline">¶</a>
    <span class="member-descr">The scaling used for drawing forces in the modelview.</span>
    </h4>

..


    | **Class type:**  :ref:`AnyVar`
    | **Eval moment:** :ref:`ModelSceneVar <InsideAMS_EvalMoments>`
    | **Default:** ``0.001``

        

    The scaling used for drawing forces in the modelview.

..



     

..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.viewForce.ComponentScale:

viewForce.ComponentScale
---------------------------


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="viewForce.ComponentScale">
    <span id="anyreacforce-viewforce-componentscale" style=""></span>
    <h4 class="html-toggle-button" style=""><span class="member-title"> &nbsp;&nbsp;.ComponentScale </span><span class="member-title-equal">=</span><span class="member-title-default"> 0.2 </span><a class="headerlink" href="#viewForce.ComponentScale" title="Permalink to this headline">¶</a>
    <span class="member-descr">The scaling used for drawing force components in the modelview.</span>
    </h4>

..


    | **Class type:**  :ref:`AnyVar`
    | **Eval moment:** :ref:`ModelSceneVar <InsideAMS_EvalMoments>`
    | **Default:** ``0.2``

        

    The scaling used for drawing force components in the modelview.

..



     

..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.viewForce.MomentToForceScale:

viewForce.MomentToForceScale
-------------------------------


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="viewForce.MomentToForceScale">
    <span id="anyreacforce-viewforce-momenttoforcescale" style=""></span>
    <h4 class="html-toggle-button" style=""><span class="member-title"> &nbsp;&nbsp;.MomentToForceScale </span><span class="member-title-equal">=</span><span class="member-title-default"> 0.1 </span><a class="headerlink" href="#viewForce.MomentToForceScale" title="Permalink to this headline">¶</a>
    <span class="member-descr">The scaling used between forces and moments in the modelview.</span>
    </h4>

..


    | **Class type:**  :ref:`AnyVar`
    | **Eval moment:** :ref:`ModelSceneVar <InsideAMS_EvalMoments>`
    | **Default:** ``0.1``

        

    The scaling used between forces and moments in the modelview.

..



     

..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.viewForce.MaximumForceLength:

viewForce.MaximumForceLength
-------------------------------


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="viewForce.MaximumForceLength">
    <span id="anyreacforce-viewforce-maximumforcelength" style=""></span>
    <h4 class="html-toggle-button" style=""><span class="member-title"> &nbsp;&nbsp;.MaximumForceLength </span><span class="member-title-equal">=</span><span class="member-title-default"> 0.25 </span><a class="headerlink" href="#viewForce.MaximumForceLength" title="Permalink to this headline">¶</a>
    <span class="member-descr">The maximum length of the force drawing arrow relative to the viewport width.</span>
    </h4>

..


    | **Class type:**  :ref:`AnyVar`
    | **Eval moment:** :ref:`ModelSceneVar <InsideAMS_EvalMoments>`
    | **Default:** ``0.25``

        

    The maximum length of the force drawing arrow relative to the viewport width.

..



     

..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.viewForce.MinimumForceLength:

viewForce.MinimumForceLength
-------------------------------


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="viewForce.MinimumForceLength">
    <span id="anyreacforce-viewforce-minimumforcelength" style=""></span>
    <h4 class="html-toggle-button" style=""><span class="member-title"> &nbsp;&nbsp;.MinimumForceLength </span><span class="member-title-equal">=</span><span class="member-title-default"> 0.2 </span><a class="headerlink" href="#viewForce.MinimumForceLength" title="Permalink to this headline">¶</a>
    <span class="member-descr">The minimum length of the force drawing arrow relative to the maximum force...</span>
    </h4>

..


    | **Class type:**  :ref:`AnyVar`
    | **Eval moment:** :ref:`ModelSceneVar <InsideAMS_EvalMoments>`
    | **Default:** ``0.2``

        

    The minimum length of the force drawing arrow relative to the maximum force drawing arrow length.

..



     

..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.viewForce.ReactionForceColor:

viewForce.ReactionForceColor
-------------------------------


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="viewForce.ReactionForceColor">
    <span id="anyreacforce-viewforce-reactionforcecolor" style=""></span>
    <h4 class="html-toggle-button" style=""><span class="member-title"> &nbsp;&nbsp;.ReactionForceColor </span><span class="member-title-equal">=</span><span class="member-title-default"> {0.8, 0.3, 0.3} </span><a class="headerlink" href="#viewForce.ReactionForceColor" title="Permalink to this headline">¶</a>
    <span class="member-descr">The color used for drawing reaction force arrowhead tips.</span>
    </h4>

..


    | **Class type:**  :ref:`AnyRGB`
    | **Eval moment:** :ref:`ModelSceneVar <InsideAMS_EvalMoments>`
    | **Default:** ``{0.8, 0.3, 0.3}``

        

    The color used for drawing reaction force arrowhead tips.

..



     

..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.viewForce.AppliedForceColor:

viewForce.AppliedForceColor
------------------------------


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="viewForce.AppliedForceColor">
    <span id="anyreacforce-viewforce-appliedforcecolor" style=""></span>
    <h4 class="html-toggle-button" style=""><span class="member-title"> &nbsp;&nbsp;.AppliedForceColor </span><span class="member-title-equal">=</span><span class="member-title-default"> {0.3, 0.8, 0.3} </span><a class="headerlink" href="#viewForce.AppliedForceColor" title="Permalink to this headline">¶</a>
    <span class="member-descr">The color used for drawing applied force arrowhead tips.</span>
    </h4>

..


    | **Class type:**  :ref:`AnyRGB`
    | **Eval moment:** :ref:`ModelSceneVar <InsideAMS_EvalMoments>`
    | **Default:** ``{0.3, 0.8, 0.3}``

        

    The color used for drawing applied force arrowhead tips.

..



     

..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.viewForce.ScaleToView:

viewForce.ScaleToView
------------------------


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="viewForce.ScaleToView">
    <span id="anyreacforce-viewforce-scaletoview" style=""></span>
    <h4 class="html-toggle-button" style=""><span class="member-title"> &nbsp;&nbsp;.ScaleToView </span><span class="member-title-equal">=</span><span class="member-title-default"> On </span><a class="headerlink" href="#viewForce.ScaleToView" title="Permalink to this headline">¶</a>
    <span class="member-descr">Switch for enabling scaling of force/moment arrows to viewport size.</span>
    </h4>

..


    | **Class type:**  :ref:`AnySwitchVar`
    | **Eval moment:** :ref:`ModelSceneVar <InsideAMS_EvalMoments>`
    | **Default:** ``On``

        

    Switch for enabling scaling of force/moment arrows to viewport size.

..



    



    

..



 



..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
     </div></div> <!--
..

.. _AnyReacForce.Type:

Type
=======


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="Type">
    <span id="anyreacforce-type" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title"> Type </span><span class="member-title-equal">=</span><span class="member-title-default"> ... </span><a class="headerlink" href="#Type" title="Permalink to this headline">¶</a>
    <span class="member-descr">Type specification of the reaction forces. Defaults to: ``repmat(nDim, On)``</span>
    </h3>

..


    | **Class type:**  :ref:`AnyReacForceType`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** *Depends on other values*
    

    
    
    



    Type specification of the reaction forces. Defaults to: ``repmat(nDim, On)``

..





.. rst-class:: html-toggle

*********************
Denied-Access members
*********************



..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    <!--
..

.. _AnyReacForce.UpdConfig:

UpdConfig
============


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="UpdConfig">
    <span id="anyreacforce-updconfig" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">UpdConfig</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#UpdConfig" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    | **Class type:**  :ref:`AnyIntVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``0``




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.UpdDesign:

UpdDesign
============


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="UpdDesign">
    <span id="anyreacforce-upddesign" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">UpdDesign</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#UpdDesign" title="Permalink to this headline">¶</a>
    <span class="member-descr">Counter of updates of design variable (i.e. the DesignVar Evaluation Moment).</span>
    </h3>

..


    | **Class type:**  :ref:`AnyIntVar`
    | **Eval moment:** :ref:`DesignVar <InsideAMS_EvalMoments>`
    | **Default:** ``0``




    Counter of updates of design variable (i.e. the DesignVar Evaluation Moment).

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.UpdOutput:

UpdOutput
============


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="UpdOutput">
    <span id="anyreacforce-updoutput" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">UpdOutput</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#UpdOutput" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    | **Class type:**  :ref:`AnyIntVar`
    | **Eval moment:** :ref:`OutputVar <InsideAMS_EvalMoments>`
    | **Default:** ``0``




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.t_:

t
====


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="t">
    <span id="anyreacforce-t_" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">t</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#t" title="Permalink to this headline">¶</a>
    <span class="member-descr">Object-time variable.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyVar`
    | **Eval moment:** :ref:`TimeVar <InsideAMS_EvalMoments>`
    | **Default:** ``0.0``




    Object-time variable.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.RefFrames:

RefFrames
============


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="RefFrames">
    <span id="anyreacforce-refframes" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">RefFrames</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#RefFrames" title="Permalink to this headline">¶</a>
    <span class="member-descr">Array of pointers to the reference frames (class AnyRefFrame and derived)...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyObjectPtrArray`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    Array of pointers to the reference frames (class AnyRefFrame and derived) that are basic input to the kinematic measure. Notice that some kinematic measures also use other refernce frames implicitly.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.Surfaces:

Surfaces
===========


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="Surfaces">
    <span id="anyreacforce-surfaces" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">Surfaces</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#Surfaces" title="Permalink to this headline">¶</a>
    <span class="member-descr">Array of pointers to the surfaces (class AnySurface and derived) that are...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyObjectPtrArray`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    Array of pointers to the surfaces (class AnySurface and derived) that are basic input to the kinematic measure. Notice that many kinematic measure do not have any surface dependency.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.KinMeasureArr:

KinMeasureArr
================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="KinMeasureArr">
    <span id="anyreacforce-kinmeasurearr" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">KinMeasureArr</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#KinMeasureArr" title="Permalink to this headline">¶</a>
    <span class="member-descr">Array of pointers to the other kinematic (class AnyKinMeasure and derived)...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyObjectPtrArray`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    Array of pointers to the other kinematic (class AnyKinMeasure and derived) that are basic input to the kinematic measure. This is used only for kinematic measure that combine other measure, but not for AnyKinMeasureReal-derived measures

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.KinMeasureIndexArr:

KinMeasureIndexArr
=====================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="KinMeasureIndexArr">
    <span id="anyreacforce-kinmeasureindexarr" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">KinMeasureIndexArr</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#KinMeasureIndexArr" title="Permalink to this headline">¶</a>
    <span class="member-descr">Array of indices of the component of the associated kinematic measure in...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyIntArray`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    Array of indices of the component of the associated kinematic measure in KinMeasureArr that is used.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.nDim:

nDim
=======


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="nDim">
    <span id="anyreacforce-ndim" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">nDim</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#nDim" title="Permalink to this headline">¶</a>
    <span class="member-descr">Dimensions of the kinematic measure, i.e., the number of elements in the...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyIntVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``0``




    Dimensions of the kinematic measure, i.e., the number of elements in the measure, e.g. the number of elements in the 'Pos' member (when avaialble) and related members.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.RefFrameOutput:

RefFrameOutput
=================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="RefFrameOutput">
    <span id="anyreacforce-refframeoutput" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">RefFrameOutput</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#RefFrameOutput" title="Permalink to this headline">¶</a>
    <span class="member-descr">Folder containing data related to all the reference frames that this measure...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyFolder`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``{}``




    Folder containing data related to all the reference frames that this measure depends on. This includes reference frames explicitly given by via members such as 'RefFrames', but also implicit dependecies via for instance surfaces (e.g. from the member 'Surfaces').

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.RefFrameOutput.RefFrameArr:

RefFrameOutput.RefFrameArr
=============================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="RefFrameOutput.RefFrameArr">
    <span id="anyreacforce-refframeoutput-refframearr" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">RefFrameOutput.RefFrameArr</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#RefFrameOutput.RefFrameArr" title="Permalink to this headline">¶</a>
    <span class="member-descr">Array of pointers to the reference frames that the measure depends on.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyObjectPtrArray`
    | **Eval moment:** :ref:`ConfigVar <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    Array of pointers to the reference frames that the measure depends on.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.RefFrameOutput.Jacobians:

RefFrameOutput.Jacobians
===========================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="RefFrameOutput.Jacobians">
    <span id="anyreacforce-refframeoutput-jacobians" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">RefFrameOutput.Jacobians</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#RefFrameOutput.Jacobians" title="Permalink to this headline">¶</a>
    <span class="member-descr">Data structure for holding Jacobian elements of the measure with respect to...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyFloat`
    | **Eval moment:** :ref:`VelVar <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    Data structure for holding Jacobian elements of the measure with respect to the degrees of freedom of the reference frames in 'DepRefFrameArr'. The structure is 3-domensional. First dimension contains on item for each frame in 'DepRefFrameArr', second dimension one for each dimension of the measure, and finally, in the third dimension, 6 jacobian elements (3 translations and 3 rotations refering to global axes).

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.RefFrameOutput.F:

RefFrameOutput.F
===================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="RefFrameOutput.F">
    <span id="anyreacforce-refframeoutput-f" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">RefFrameOutput.F</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#RefFrameOutput.F" title="Permalink to this headline">¶</a>
    <span class="member-descr">Array of 3D force vectors (global coordinates) associated with the...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyFloat`
    | **Eval moment:** :ref:`OutputVar <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    Array of 3D force vectors (global coordinates) associated with the references frames used by the force object (i.e. by the underlying kinematic measure).

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.RefFrameOutput.M:

RefFrameOutput.M
===================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="RefFrameOutput.M">
    <span id="anyreacforce-refframeoutput-m" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">RefFrameOutput.M</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#RefFrameOutput.M" title="Permalink to this headline">¶</a>
    <span class="member-descr">Array of 3D moment vectors (global coordinates) associated with the...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyFloat`
    | **Eval moment:** :ref:`OutputVar <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    Array of 3D moment vectors (global coordinates) associated with the references frames used by the force object (i.e. by the underlying kinematic measure).

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.viewForce.UpdConfig:

viewForce.UpdConfig
======================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="viewForce.UpdConfig">
    <span id="anyreacforce-viewforce-updconfig" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">viewForce.UpdConfig</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#viewForce.UpdConfig" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    | **Class type:**  :ref:`AnyIntVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``0``




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.viewForce.UpdDesign:

viewForce.UpdDesign
======================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="viewForce.UpdDesign">
    <span id="anyreacforce-viewforce-upddesign" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">viewForce.UpdDesign</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#viewForce.UpdDesign" title="Permalink to this headline">¶</a>
    <span class="member-descr">Counter of updates of design variable (i.e. the DesignVar Evaluation Moment).</span>
    </h3>

..


    | **Class type:**  :ref:`AnyIntVar`
    | **Eval moment:** :ref:`DesignVar <InsideAMS_EvalMoments>`
    | **Default:** ``0``




    Counter of updates of design variable (i.e. the DesignVar Evaluation Moment).

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.viewForce.UpdOutput:

viewForce.UpdOutput
======================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="viewForce.UpdOutput">
    <span id="anyreacforce-viewforce-updoutput" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">viewForce.UpdOutput</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#viewForce.UpdOutput" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    | **Class type:**  :ref:`AnyIntVar`
    | **Eval moment:** :ref:`OutputVar <InsideAMS_EvalMoments>`
    | **Default:** ``0``




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.Fin:

Fin
======


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="Fin">
    <span id="anyreacforce-fin" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">Fin</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#Fin" title="Permalink to this headline">¶</a>
    <span class="member-descr">The generalized force vector of input loads to the given type of analysis,...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyVector`
    | **Eval moment:** :ref:`ForceVar <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    The generalized force vector of input loads to the given type of analysis, i.e., to the right-hand side of the equations of motion.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyReacForce.Fout:

Fout
=======


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="Fout">
    <span id="anyreacforce-fout" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">Fout</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#Fout" title="Permalink to this headline">¶</a>
    <span class="member-descr">The generalized force vector of outputs from the given type of analysis....</span>
    </h3>

..


    | **Class type:**  :ref:`AnyVector`
    | **Eval moment:** :ref:`OutputVar <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    The generalized force vector of outputs from the given type of analysis. This is the total force in the element after the analysis is executed.

..






