
.. _AnyInputDB:

##########
AnyInputDB
##########

.. Do not edit this file.
.. It is automatically generated by ``reference/create_pages.py``

:Type: Creatable
:Parent class: :ref:`AnyDataFileBase`


**************
Description
**************



.. The include file below is not auto genrated. Please edit that to modify the description file
.. for this class.

.. include:: /class-descriptions/AnyInputDB.rst



.. Hack to insure that that an emtpy section deosn't screw
.. with the section levels.

|nbsp|






.. Do not edit this file.
.. It is automatically generated. If you need to alter the demos which are include
.. edit the demos/demos.json file

.. rst-class:: plain

.. list-table:: Demo examples related to AnyInputDB
   :widths: 25 75
   :header-rows: 1

   * - Demo
     - Description
   * - :download:`ClassExamples.AnyInputDB.MSAccess </demos/zips/ClassExamples.AnyInputDB.MSAccess.zip>`
     - MS Access database interface demonstration.
   * - :download:`ClassExamples.AnyInputDB.MySQL </demos/zips/ClassExamples.AnyInputDB.MySQL.zip>`
     - MySQL database interface demonstration.
   * - :download:`ClassExamples.AnyInputDB.OracleXE </demos/zips/ClassExamples.AnyInputDB.OracleXE.zip>`
     - OracleXE database interface demonstration.
   * - :download:`ClassExamples.AnyInputDB.SQLServer </demos/zips/ClassExamples.AnyInputDB.SQLServer.zip>`
     - MS SQL-Server database interface demonstration.
   * - :download:`ClassExamples.Arm2D.MSAccess </demos/zips/ClassExamples.Arm2D.MSAccess.zip>`
     - Using MS Access data in a simple model.
   * - :download:`ClassExamples.Arm2D.MySQL </demos/zips/ClassExamples.Arm2D.MySQL.zip>`
     - Using MySQL data in a simple model.
   * - :download:`ClassExamples.Arm2D.OracleXE </demos/zips/ClassExamples.Arm2D.OracleXE.zip>`
     - Using Oracle XE data in a simple model.
   * - :download:`ClassExamples.Arm2D.SQLServer </demos/zips/ClassExamples.Arm2D.SQLServer.zip>`
     - Using MS SQL-Server data in a simple model.



.. Do not edit this file.
.. Members are must be modified directly in the AMS source code.




*******************************
Required initialization members
*******************************



..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    <!--
..

.. _AnyInputDB.FileName:

FileName
===========


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="FileName">
    <span id="anyinputdb-filename" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">FileName</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#FileName" title="Permalink to this headline">¶</a>
    <span class="member-descr">Name of the file.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyFileVar`
    | **Eval moment:** :ref:`DesignVar <InsideAMS_EvalMoments>`



    Name of the file.

..





..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyInputDB.DatabaseType:

DatabaseType
===============


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="DatabaseType">
    <span id="anyinputdb-databasetype" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">DatabaseType</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#DatabaseType" title="Permalink to this headline">¶</a>
    <span class="member-descr">String specifying the database type.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyDBType`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`



    String specifying the database type.

..





..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyInputDB.SQLCommand:

SQLCommand
=============


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="SQLCommand">
    <span id="anyinputdb-sqlcommand" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">SQLCommand</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#SQLCommand" title="Permalink to this headline">¶</a>
    <span class="member-descr">A string holding one or many SQL commands to be executed on the database...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyString`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`



    A string holding one or many SQL commands to be executed on the database during the model loading.

..






*******************************
Optional initialization members
*******************************



..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    <!--
..

.. _AnyInputDB.ServerName:

ServerName
=============


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="ServerName">
    <span id="anyinputdb-servername" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title"> ServerName </span><span class="member-title-equal">=</span><span class="member-title-default"> "" </span><a class="headerlink" href="#ServerName" title="Permalink to this headline">¶</a>
    <span class="member-descr">Server name (not used for connections to MS Access).</span>
    </h3>

..


    | **Class type:**  :ref:`AnyStringVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``""``



    Server name (not used for connections to MS Access).

..





..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyInputDB.DatabaseName:

DatabaseName
===============


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="DatabaseName">
    <span id="anyinputdb-databasename" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title"> DatabaseName </span><span class="member-title-equal">=</span><span class="member-title-default"> "" </span><a class="headerlink" href="#DatabaseName" title="Permalink to this headline">¶</a>
    <span class="member-descr">The database name (when applicable).</span>
    </h3>

..


    | **Class type:**  :ref:`AnyStringVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``""``



    The database name (when applicable).

..





..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyInputDB.UserName:

UserName
===========


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="UserName">
    <span id="anyinputdb-username" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title"> UserName </span><span class="member-title-equal">=</span><span class="member-title-default"> "" </span><a class="headerlink" href="#UserName" title="Permalink to this headline">¶</a>
    <span class="member-descr">The name of user accessing the database.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyStringVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``""``



    The name of user accessing the database.

..





..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyInputDB.Password:

Password
===========


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="Password">
    <span id="anyinputdb-password" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title"> Password </span><span class="member-title-equal">=</span><span class="member-title-default"> "" </span><a class="headerlink" href="#Password" title="Permalink to this headline">¶</a>
    <span class="member-descr">Password for the user name.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyStringVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``""``



    Password for the user name.

..





..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyInputDB.WindowsAuthentication:

WindowsAuthentication
========================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="WindowsAuthentication">
    <span id="anyinputdb-windowsauthentication" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title"> WindowsAuthentication </span><span class="member-title-equal">=</span><span class="member-title-default"> Off </span><a class="headerlink" href="#WindowsAuthentication" title="Permalink to this headline">¶</a>
    <span class="member-descr">Use windows authentication, as opposed to database authentication (Only used...</span>
    </h3>

..


    | **Class type:**  :ref:`AnySwitchVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``Off``



    Use windows authentication, as opposed to database authentication (Only used for MS SQL Server)

..





..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyInputDB.OracleClientAccess:

OracleClientAccess
=====================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="OracleClientAccess">
    <span id="anyinputdb-oracleclientaccess" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title"> OracleClientAccess </span><span class="member-title-equal">=</span><span class="member-title-default"> Off </span><a class="headerlink" href="#OracleClientAccess" title="Permalink to this headline">¶</a>
    <span class="member-descr">Client aceess to Oracle databases (Only used for Oracle Server)</span>
    </h3>

..


    | **Class type:**  :ref:`AnySwitchVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``Off``



    Client aceess to Oracle databases (Only used for Oracle Server)

..





..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyInputDB.SQLCommandTag:

SQLCommandTag
================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="SQLCommandTag">
    <span id="anyinputdb-sqlcommandtag" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title"> SQLCommandTag </span><span class="member-title-equal">=</span><span class="member-title-default"> ... </span><a class="headerlink" href="#SQLCommandTag" title="Permalink to this headline">¶</a>
    <span class="member-descr">A string holding tags associated with the entries of the SQLCommand. In...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyString`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** *Depends on other values*



    A string holding tags associated with the entries of the SQLCommand. In principle, the tags and the commands should match in dimensionality; if not tags are autogenerated.

..





.. rst-class:: html-toggle

*********************
Denied-Access members
*********************



..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    <!--
..

.. _AnyInputDB.UpdData:

UpdData
==========


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="UpdData">
    <span id="anyinputdb-upddata" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">UpdData</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#UpdData" title="Permalink to this headline">¶</a>
    <span class="member-descr">Data update counter that counts number of data update and configuration processes.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyIntVar`
    | **Eval moment:** :ref:`DesignVar <InsideAMS_EvalMoments>`
    | **Default:** ``0``




    Data update counter that counts number of data update and configuration processes.

..





