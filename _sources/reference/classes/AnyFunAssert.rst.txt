
.. _AnyFunAssert:

############
AnyFunAssert
############

.. Do not edit this file.
.. It is automatically generated by ``reference/create_pages.py``

:Type: Abstract
:Parent class: :ref:`AnyFunAssertion`


**************
Description
**************


This is an abstract class implementing the function: :ref:`assert()` .

.. seealso:: Please see the documentation on :ref:`assert()` for more information
    on how to use the function.


.. Hack to insure that that an emtpy section deosn't screw
.. with the section levels.

|nbsp|







.. Do not edit this file.
.. Members are must be modified directly in the AMS source code.








.. rst-class:: html-toggle

*********************
Denied-Access members
*********************



..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    <!--
..

.. _AnyFunAssert.MonoFunctionInt:

MonoFunctionInt
==================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="MonoFunctionInt">
    <span id="anyfunassert-monofunctionint" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionInt</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionInt" title="Permalink to this headline">¶</a>
    <span class="member-descr">MonoFunctionInt.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyMonoFunction`
    | **Eval moment:** :ref:`NotDefined <InsideAMS_EvalMoments>`
    | **Default:** ``{}``




    MonoFunctionInt.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionInt.ArgList:

MonoFunctionInt.ArgList
==========================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="MonoFunctionInt.ArgList">
    <span id="anyfunassert-monofunctionint-arglist" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionInt.ArgList</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionInt.ArgList" title="Permalink to this headline">¶</a>
    <span class="member-descr">A special folder containing the argument list of the function.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyFunctionArgList`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``{}``




    A special folder containing the argument list of the function.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionInt.ArgList.Arg:

MonoFunctionInt.ArgList.Arg
==============================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="MonoFunctionInt.ArgList.Arg">
    <span id="anyfunassert-monofunctionint-arglist-arg" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionInt.ArgList.Arg</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionInt.ArgList.Arg" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    | **Class type:**  :ref:`AnyInt`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionFloat:

MonoFunctionFloat
====================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="MonoFunctionFloat">
    <span id="anyfunassert-monofunctionfloat" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionFloat</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionFloat" title="Permalink to this headline">¶</a>
    <span class="member-descr">MonoFunctionFloat.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyMonoFunction`
    | **Eval moment:** :ref:`NotDefined <InsideAMS_EvalMoments>`
    | **Default:** ``{}``




    MonoFunctionFloat.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionFloat.ArgList:

MonoFunctionFloat.ArgList
============================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="MonoFunctionFloat.ArgList">
    <span id="anyfunassert-monofunctionfloat-arglist" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionFloat.ArgList</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionFloat.ArgList" title="Permalink to this headline">¶</a>
    <span class="member-descr">A special folder containing the argument list of the function.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyFunctionArgList`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``{}``




    A special folder containing the argument list of the function.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionFloat.ArgList.Arg:

MonoFunctionFloat.ArgList.Arg
================================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="MonoFunctionFloat.ArgList.Arg">
    <span id="anyfunassert-monofunctionfloat-arglist-arg" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionFloat.ArgList.Arg</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionFloat.ArgList.Arg" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    | **Class type:**  :ref:`AnyFloat`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionSwitch:

MonoFunctionSwitch
=====================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="MonoFunctionSwitch">
    <span id="anyfunassert-monofunctionswitch" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionSwitch</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionSwitch" title="Permalink to this headline">¶</a>
    <span class="member-descr">MonoFunctionSwitch.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyMonoFunction`
    | **Eval moment:** :ref:`NotDefined <InsideAMS_EvalMoments>`
    | **Default:** ``{}``




    MonoFunctionSwitch.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionSwitch.ArgList:

MonoFunctionSwitch.ArgList
=============================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="MonoFunctionSwitch.ArgList">
    <span id="anyfunassert-monofunctionswitch-arglist" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionSwitch.ArgList</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionSwitch.ArgList" title="Permalink to this headline">¶</a>
    <span class="member-descr">A special folder containing the argument list of the function.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyFunctionArgList`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``{}``




    A special folder containing the argument list of the function.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionSwitch.ArgList.Arg:

MonoFunctionSwitch.ArgList.Arg
=================================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="MonoFunctionSwitch.ArgList.Arg">
    <span id="anyfunassert-monofunctionswitch-arglist-arg" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionSwitch.ArgList.Arg</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionSwitch.ArgList.Arg" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    | **Class type:**  :ref:`AnySwitch`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionString:

MonoFunctionString
=====================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="MonoFunctionString">
    <span id="anyfunassert-monofunctionstring" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionString</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionString" title="Permalink to this headline">¶</a>
    <span class="member-descr">MonoFunctionString.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyMonoFunction`
    | **Eval moment:** :ref:`NotDefined <InsideAMS_EvalMoments>`
    | **Default:** ``{}``




    MonoFunctionString.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionString.ArgList:

MonoFunctionString.ArgList
=============================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="MonoFunctionString.ArgList">
    <span id="anyfunassert-monofunctionstring-arglist" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionString.ArgList</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionString.ArgList" title="Permalink to this headline">¶</a>
    <span class="member-descr">A special folder containing the argument list of the function.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyFunctionArgList`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``{}``




    A special folder containing the argument list of the function.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionString.ArgList.Arg:

MonoFunctionString.ArgList.Arg
=================================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="MonoFunctionString.ArgList.Arg">
    <span id="anyfunassert-monofunctionstring-arglist-arg" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionString.ArgList.Arg</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionString.ArgList.Arg" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    | **Class type:**  :ref:`AnyString`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionIntUserMsg:

MonoFunctionIntUserMsg
=========================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="MonoFunctionIntUserMsg">
    <span id="anyfunassert-monofunctionintusermsg" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionIntUserMsg</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionIntUserMsg" title="Permalink to this headline">¶</a>
    <span class="member-descr">MonoFunctionIntUserMsg.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyMonoFunction`
    | **Eval moment:** :ref:`NotDefined <InsideAMS_EvalMoments>`
    | **Default:** ``{}``




    MonoFunctionIntUserMsg.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionIntUserMsg.ArgList:

MonoFunctionIntUserMsg.ArgList
=================================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="MonoFunctionIntUserMsg.ArgList">
    <span id="anyfunassert-monofunctionintusermsg-arglist" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionIntUserMsg.ArgList</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionIntUserMsg.ArgList" title="Permalink to this headline">¶</a>
    <span class="member-descr">A special folder containing the argument list of the function.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyFunctionArgList`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``{}``




    A special folder containing the argument list of the function.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionIntUserMsg.ArgList.Arg:

MonoFunctionIntUserMsg.ArgList.Arg
=====================================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="MonoFunctionIntUserMsg.ArgList.Arg">
    <span id="anyfunassert-monofunctionintusermsg-arglist-arg" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionIntUserMsg.ArgList.Arg</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionIntUserMsg.ArgList.Arg" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    | **Class type:**  :ref:`AnyInt`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionIntUserMsg.ArgList.User message:

MonoFunctionIntUserMsg.ArgList.User message
==============================================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="MonoFunctionIntUserMsg.ArgList.User message">
    <span id="anyfunassert-monofunctionintusermsg-arglist-user message" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionIntUserMsg.ArgList.User message</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionIntUserMsg.ArgList.User message" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    | **Class type:**  :ref:`AnyStringVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``""``




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionFloatUserMsg:

MonoFunctionFloatUserMsg
===========================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="MonoFunctionFloatUserMsg">
    <span id="anyfunassert-monofunctionfloatusermsg" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionFloatUserMsg</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionFloatUserMsg" title="Permalink to this headline">¶</a>
    <span class="member-descr">MonoFunctionFloatUserMsg.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyMonoFunction`
    | **Eval moment:** :ref:`NotDefined <InsideAMS_EvalMoments>`
    | **Default:** ``{}``




    MonoFunctionFloatUserMsg.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionFloatUserMsg.ArgList:

MonoFunctionFloatUserMsg.ArgList
===================================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="MonoFunctionFloatUserMsg.ArgList">
    <span id="anyfunassert-monofunctionfloatusermsg-arglist" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionFloatUserMsg.ArgList</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionFloatUserMsg.ArgList" title="Permalink to this headline">¶</a>
    <span class="member-descr">A special folder containing the argument list of the function.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyFunctionArgList`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``{}``




    A special folder containing the argument list of the function.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionFloatUserMsg.ArgList.Arg:

MonoFunctionFloatUserMsg.ArgList.Arg
=======================================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="MonoFunctionFloatUserMsg.ArgList.Arg">
    <span id="anyfunassert-monofunctionfloatusermsg-arglist-arg" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionFloatUserMsg.ArgList.Arg</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionFloatUserMsg.ArgList.Arg" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    | **Class type:**  :ref:`AnyFloat`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionFloatUserMsg.ArgList.User message:

MonoFunctionFloatUserMsg.ArgList.User message
================================================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="MonoFunctionFloatUserMsg.ArgList.User message">
    <span id="anyfunassert-monofunctionfloatusermsg-arglist-user message" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionFloatUserMsg.ArgList.User message</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionFloatUserMsg.ArgList.User message" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    | **Class type:**  :ref:`AnyStringVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``""``




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionSwitchUserMsg:

MonoFunctionSwitchUserMsg
============================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="MonoFunctionSwitchUserMsg">
    <span id="anyfunassert-monofunctionswitchusermsg" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionSwitchUserMsg</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionSwitchUserMsg" title="Permalink to this headline">¶</a>
    <span class="member-descr">MonoFunctionSwitchUserMsg.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyMonoFunction`
    | **Eval moment:** :ref:`NotDefined <InsideAMS_EvalMoments>`
    | **Default:** ``{}``




    MonoFunctionSwitchUserMsg.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionSwitchUserMsg.ArgList:

MonoFunctionSwitchUserMsg.ArgList
====================================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="MonoFunctionSwitchUserMsg.ArgList">
    <span id="anyfunassert-monofunctionswitchusermsg-arglist" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionSwitchUserMsg.ArgList</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionSwitchUserMsg.ArgList" title="Permalink to this headline">¶</a>
    <span class="member-descr">A special folder containing the argument list of the function.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyFunctionArgList`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``{}``




    A special folder containing the argument list of the function.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionSwitchUserMsg.ArgList.Arg:

MonoFunctionSwitchUserMsg.ArgList.Arg
========================================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="MonoFunctionSwitchUserMsg.ArgList.Arg">
    <span id="anyfunassert-monofunctionswitchusermsg-arglist-arg" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionSwitchUserMsg.ArgList.Arg</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionSwitchUserMsg.ArgList.Arg" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    | **Class type:**  :ref:`AnySwitch`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionSwitchUserMsg.ArgList.User message:

MonoFunctionSwitchUserMsg.ArgList.User message
=================================================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="MonoFunctionSwitchUserMsg.ArgList.User message">
    <span id="anyfunassert-monofunctionswitchusermsg-arglist-user message" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionSwitchUserMsg.ArgList.User message</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionSwitchUserMsg.ArgList.User message" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    | **Class type:**  :ref:`AnyStringVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``""``




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionStringUserMsg:

MonoFunctionStringUserMsg
============================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="MonoFunctionStringUserMsg">
    <span id="anyfunassert-monofunctionstringusermsg" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionStringUserMsg</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionStringUserMsg" title="Permalink to this headline">¶</a>
    <span class="member-descr">MonoFunctionStringUserMsg.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyMonoFunction`
    | **Eval moment:** :ref:`NotDefined <InsideAMS_EvalMoments>`
    | **Default:** ``{}``




    MonoFunctionStringUserMsg.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionStringUserMsg.ArgList:

MonoFunctionStringUserMsg.ArgList
====================================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="MonoFunctionStringUserMsg.ArgList">
    <span id="anyfunassert-monofunctionstringusermsg-arglist" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionStringUserMsg.ArgList</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionStringUserMsg.ArgList" title="Permalink to this headline">¶</a>
    <span class="member-descr">A special folder containing the argument list of the function.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyFunctionArgList`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``{}``




    A special folder containing the argument list of the function.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionStringUserMsg.ArgList.Arg:

MonoFunctionStringUserMsg.ArgList.Arg
========================================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="MonoFunctionStringUserMsg.ArgList.Arg">
    <span id="anyfunassert-monofunctionstringusermsg-arglist-arg" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionStringUserMsg.ArgList.Arg</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionStringUserMsg.ArgList.Arg" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    | **Class type:**  :ref:`AnyString`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionStringUserMsg.ArgList.User message:

MonoFunctionStringUserMsg.ArgList.User message
=================================================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="MonoFunctionStringUserMsg.ArgList.User message">
    <span id="anyfunassert-monofunctionstringusermsg-arglist-user message" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionStringUserMsg.ArgList.User message</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionStringUserMsg.ArgList.User message" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    | **Class type:**  :ref:`AnyStringVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``""``




    <No description>

..





.. rst-class:: html-toggle

*********************
Deprecated members
*********************



..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    <!--
..

.. _AnyFunAssert.MonoFunctionInt.Return:

MonoFunctionInt.Return
=========================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="MonoFunctionInt.Return">
    <span id="anyfunassert-monofunctionint-return" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionInt.Return</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionInt.Return" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    |
    | **Class type:**  :ref:`AnyInt`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`

    .. rst-class:: without-title

    .. danger::
        **Deprecated**: Hidden object for return-data management.




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionFloat.Return:

MonoFunctionFloat.Return
===========================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="MonoFunctionFloat.Return">
    <span id="anyfunassert-monofunctionfloat-return" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionFloat.Return</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionFloat.Return" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    |
    | **Class type:**  :ref:`AnyFloat`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`

    .. rst-class:: without-title

    .. danger::
        **Deprecated**: Hidden object for return-data management.




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionSwitch.Return:

MonoFunctionSwitch.Return
============================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="MonoFunctionSwitch.Return">
    <span id="anyfunassert-monofunctionswitch-return" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionSwitch.Return</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionSwitch.Return" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    |
    | **Class type:**  :ref:`AnySwitch`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`

    .. rst-class:: without-title

    .. danger::
        **Deprecated**: Hidden object for return-data management.




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionString.Return:

MonoFunctionString.Return
============================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="MonoFunctionString.Return">
    <span id="anyfunassert-monofunctionstring-return" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionString.Return</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionString.Return" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    |
    | **Class type:**  :ref:`AnyString`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`

    .. rst-class:: without-title

    .. danger::
        **Deprecated**: Hidden object for return-data management.




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionIntUserMsg.Return:

MonoFunctionIntUserMsg.Return
================================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="MonoFunctionIntUserMsg.Return">
    <span id="anyfunassert-monofunctionintusermsg-return" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionIntUserMsg.Return</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionIntUserMsg.Return" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    |
    | **Class type:**  :ref:`AnyInt`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`

    .. rst-class:: without-title

    .. danger::
        **Deprecated**: Hidden object for return-data management.




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionFloatUserMsg.Return:

MonoFunctionFloatUserMsg.Return
==================================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="MonoFunctionFloatUserMsg.Return">
    <span id="anyfunassert-monofunctionfloatusermsg-return" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionFloatUserMsg.Return</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionFloatUserMsg.Return" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    |
    | **Class type:**  :ref:`AnyFloat`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`

    .. rst-class:: without-title

    .. danger::
        **Deprecated**: Hidden object for return-data management.




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionSwitchUserMsg.Return:

MonoFunctionSwitchUserMsg.Return
===================================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="MonoFunctionSwitchUserMsg.Return">
    <span id="anyfunassert-monofunctionswitchusermsg-return" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionSwitchUserMsg.Return</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionSwitchUserMsg.Return" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    |
    | **Class type:**  :ref:`AnySwitch`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`

    .. rst-class:: without-title

    .. danger::
        **Deprecated**: Hidden object for return-data management.




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyFunAssert.MonoFunctionStringUserMsg.Return:

MonoFunctionStringUserMsg.Return
===================================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="MonoFunctionStringUserMsg.Return">
    <span id="anyfunassert-monofunctionstringusermsg-return" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">MonoFunctionStringUserMsg.Return</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#MonoFunctionStringUserMsg.Return" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    |
    | **Class type:**  :ref:`AnyString`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`

    .. rst-class:: without-title

    .. danger::
        **Deprecated**: Hidden object for return-data management.




    <No description>

..





