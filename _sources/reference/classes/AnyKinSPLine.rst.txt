
.. _AnyKinSPLine:

############
AnyKinSPLine
############

.. Do not edit this file.
.. It is automatically generated by ``reference/create_pages.py``

:Type: Creatable
:Parent class: :ref:`AnyKinPLine`


**************
Description
**************



.. The include file below is not auto genrated. Please edit that to modify the description file
.. for this class.

.. include:: /class-descriptions/AnyKinSPLine.rst



.. Hack to insure that that an emtpy section deosn't screw
.. with the section levels.

|nbsp|






.. Do not edit this file.
.. It is automatically generated. If you need to alter the demos which are include
.. edit the demos/demos.json file

.. rst-class:: plain

.. list-table:: Demo examples related to AnyKinSPLine
   :widths: 25 75
   :header-rows: 1

   * - Demo
     - Description
   * - :download:`ClassExamples.AnyShortestPathMuscle </demos/zips/ClassExamples.AnyShortestPathMuscle.zip>`
     - Muscle wrapping by class AnyShortestPathMuscle.



.. Do not edit this file.
.. Members are must be modified directly in the AMS source code.



****************
Expected members
****************
.. Do not edit this file.
.. Members are must be modified directly in the AMS source code.



..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    <!--
..

.. _AnyKinSPLine.AnyRefFrame:

AnyRefFrame
==============


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="AnyRefFrame">
    <span id="anykinspline-anyrefframe" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title"> AnyRefFrame (2..Inf) </span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#AnyRefFrame" title="Permalink to this headline">¶</a>
    <span class="member-descr">The reference frames that are input for the measure.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyRefFrame`
    | **Number:** 2..Inf



    The reference frames that are input for the measure.

..








*******************************
Required initialization members
*******************************



..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    <!--
..

.. _AnyKinSPLine.StringMesh:

StringMesh
=============


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="StringMesh">
    <span id="anykinspline-stringmesh" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">StringMesh</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#StringMesh" title="Permalink to this headline">¶</a>
    <span class="member-descr">Number of discretization points on each string segment.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`



    Number of discretization points on each string segment.

..






*******************************
Optional initialization members
*******************************



..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    <!--
..

.. _AnyKinSPLine.InitWrapPosVectors:

InitWrapPosVectors
=====================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="InitWrapPosVectors">
    <span id="anykinspline-initwrapposvectors" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title"> InitWrapPosVectors </span><span class="member-title-equal">=</span><span class="member-title-default"> ... </span><a class="headerlink" href="#InitWrapPosVectors" title="Permalink to this headline">¶</a>
    <span class="member-descr">An array of 3-D vectors that specify the initial shape of the string. The...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyMatrix`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** *Depends on other values*



    An array of 3-D vectors that specify the initial shape of the string. The vectors are ordered as rows of a matrix. For each line segment two vectors must be specified. They are defining two points relative to the line segment's origin and insertion nodes and the curve's initial shape will be three straight lines; from the origin to the first point, then to the second, and finally to the insertion point.

..





..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.InitWrapPosVecArr:

InitWrapPosVecArr
====================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="InitWrapPosVecArr">
    <span id="anykinspline-initwrapposvecarr" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title"> InitWrapPosVecArr </span><span class="member-title-equal">=</span><span class="member-title-default"> ... </span><a class="headerlink" href="#InitWrapPosVecArr" title="Permalink to this headline">¶</a>
    <span class="member-descr">Object pointer array that must collect pointers to the initial position...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyObjectPtr`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** *Depends on other values*



    Object pointer array that must collect pointers to the initial position vectors. The initial position vectors are one array of 3D vector (AnyMatrix) for each line segment of the SPLine. Pointer value of 'None' is allowed, if a straight line between origin and insertion.

..





..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.InitWrapPosOnlyOnOff:

InitWrapPosOnlyOnOff
=======================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="InitWrapPosOnlyOnOff">
    <span id="anykinspline-initwrapposonlyonoff" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title"> InitWrapPosOnlyOnOff </span><span class="member-title-equal">=</span><span class="member-title-default"> Off </span><a class="headerlink" href="#InitWrapPosOnlyOnOff" title="Permalink to this headline">¶</a>
    <span class="member-descr">Switch for whether to use initial position only or carry out the wrapping...</span>
    </h3>

..


    | **Class type:**  :ref:`AnySwitchVar`
    | **Eval moment:** :ref:`DesignVar <InsideAMS_EvalMoments>`
    | **Default:** ``Off``



    Switch for whether to use initial position only or carry out the wrapping computation. This is an option aimed at debugging initial position specification for all positions during a motion.

..





..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.InitWrapPosForEachStepOnOff:

InitWrapPosForEachStepOnOff
==============================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="InitWrapPosForEachStepOnOff">
    <span id="anykinspline-initwrapposforeachsteponoff" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title"> InitWrapPosForEachStepOnOff </span><span class="member-title-equal">=</span><span class="member-title-default"> Off </span><a class="headerlink" href="#InitWrapPosForEachStepOnOff" title="Permalink to this headline">¶</a>
    <span class="member-descr">Switch to use the initial condition vectors as starting point in each time step..</span>
    </h3>

..


    | **Class type:**  :ref:`AnySwitchVar`
    | **Eval moment:** :ref:`DesignVar <InsideAMS_EvalMoments>`
    | **Default:** ``Off``



    Switch to use the initial condition vectors as starting point in each time step..

..





..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.RelTol:

RelTol
=========


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="RelTol">
    <span id="anykinspline-reltol" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title"> RelTol </span><span class="member-title-equal">=</span><span class="member-title-default"> 1e-08 </span><a class="headerlink" href="#RelTol" title="Permalink to this headline">¶</a>
    <span class="member-descr">Relative tolerance for the change of the string that is used to determine...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``1e-08``



    Relative tolerance for the change of the string that is used to determine whether the solution is acceptable. The string length is used for normalization of the displacement.

..





..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.AbsTol:

AbsTol
=========


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="AbsTol">
    <span id="anykinspline-abstol" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title"> AbsTol </span><span class="member-title-equal">=</span><span class="member-title-default"> 1e-06 </span><a class="headerlink" href="#AbsTol" title="Permalink to this headline">¶</a>
    <span class="member-descr">Absolute tolerance for the change of positions of wrapping points that is...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``1e-06``



    Absolute tolerance for the change of positions of wrapping points that is used to determine whether the solution is acceptable.

..





..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.AugLagCoef:

AugLagCoef
=============


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="AugLagCoef">
    <span id="anykinspline-auglagcoef" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title"> AugLagCoef </span><span class="member-title-equal">=</span><span class="member-title-default"> 1000.0 </span><a class="headerlink" href="#AugLagCoef" title="Permalink to this headline">¶</a>
    <span class="member-descr">Coefficient for penalty term in the Augmented Lagragian method. Increasing...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``1000.0``



    Coefficient for penalty term in the Augmented Lagragian method. Increasing this value can in some cases remove problems of negative pivots in the velocity analysis.

..





..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.MaxIteration:

MaxIteration
===============


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="MaxIteration">
    <span id="anykinspline-maxiteration" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title"> MaxIteration </span><span class="member-title-equal">=</span><span class="member-title-default"> 100 </span><a class="headerlink" href="#MaxIteration" title="Permalink to this headline">¶</a>
    <span class="member-descr">Maximum number of interation in line wrapping solver. It can be increased if...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyIntVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``100``



    Maximum number of interation in line wrapping solver. It can be increased if the solver runs out of iteration step in difficult problems.

..





..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.MaxRelStepSize:

MaxRelStepSize
=================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="MaxRelStepSize">
    <span id="anykinspline-maxrelstepsize" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title"> MaxRelStepSize </span><span class="member-title-equal">=</span><span class="member-title-default"> 1.0 </span><a class="headerlink" href="#MaxRelStepSize" title="Permalink to this headline">¶</a>
    <span class="member-descr">Maximum relative step size. The default of 1.0 implies full step size, but...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``1.0``



    Maximum relative step size. The default of 1.0 implies full step size, but it can be decreased to increase robustness for difficult problems.

..





..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.SolverType:

SolverType
=============


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="SolverType">
    <span id="anykinspline-solvertype" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title"> SolverType </span><span class="member-title-equal">=</span><span class="member-title-default"> SPSolverModes </span><a class="headerlink" href="#SolverType" title="Permalink to this headline">¶</a>
    <span class="member-descr">The SolverType defines one of four solver for the wrapping problem. Possible...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyKinSPSheetSolverType`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``SPSolverModes``



    The SolverType defines one of four solver for the wrapping problem. Possible Values are:
    SPSolverFull - standard optimization solver for constraint optimization;
    SPSolverModes - method using modes to solve the optimization problem. This method is default and faster especially for fewer points in contact.

..





.. rst-class:: html-toggle

*********************
Denied-Access members
*********************



..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    <!--
..

.. _AnyKinSPLine.UpdConfig:

UpdConfig
============


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="UpdConfig">
    <span id="anykinspline-updconfig" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">UpdConfig</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#UpdConfig" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    | **Class type:**  :ref:`AnyIntVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``0``




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.UpdDesign:

UpdDesign
============


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="UpdDesign">
    <span id="anykinspline-upddesign" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">UpdDesign</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#UpdDesign" title="Permalink to this headline">¶</a>
    <span class="member-descr">Counter of updates of design variable (i.e. the DesignVar Evaluation Moment).</span>
    </h3>

..


    | **Class type:**  :ref:`AnyIntVar`
    | **Eval moment:** :ref:`DesignVar <InsideAMS_EvalMoments>`
    | **Default:** ``0``




    Counter of updates of design variable (i.e. the DesignVar Evaluation Moment).

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.UpdOutput:

UpdOutput
============


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="UpdOutput">
    <span id="anykinspline-updoutput" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">UpdOutput</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#UpdOutput" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    | **Class type:**  :ref:`AnyIntVar`
    | **Eval moment:** :ref:`OutputVar <InsideAMS_EvalMoments>`
    | **Default:** ``0``




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.t_:

t
====


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="t">
    <span id="anykinspline-t_" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">t</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#t" title="Permalink to this headline">¶</a>
    <span class="member-descr">Object-time variable.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyVar`
    | **Eval moment:** :ref:`TimeVar <InsideAMS_EvalMoments>`
    | **Default:** ``0.0``




    Object-time variable.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.RefFrames:

RefFrames
============


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="RefFrames">
    <span id="anykinspline-refframes" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">RefFrames</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#RefFrames" title="Permalink to this headline">¶</a>
    <span class="member-descr">Array of pointers to the reference frames (class AnyRefFrame and derived)...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyObjectPtrArray`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    Array of pointers to the reference frames (class AnyRefFrame and derived) that are basic input to the kinematic measure. Notice that some kinematic measures also use other refernce frames implicitly.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.Surfaces:

Surfaces
===========


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="Surfaces">
    <span id="anykinspline-surfaces" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">Surfaces</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#Surfaces" title="Permalink to this headline">¶</a>
    <span class="member-descr">Array of pointers to the surfaces (class AnySurface and derived) that are...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyObjectPtrArray`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    Array of pointers to the surfaces (class AnySurface and derived) that are basic input to the kinematic measure. Notice that many kinematic measure do not have any surface dependency.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.KinMeasureArr:

KinMeasureArr
================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="KinMeasureArr">
    <span id="anykinspline-kinmeasurearr" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">KinMeasureArr</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#KinMeasureArr" title="Permalink to this headline">¶</a>
    <span class="member-descr">Array of pointers to the other kinematic (class AnyKinMeasure and derived)...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyObjectPtrArray`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    Array of pointers to the other kinematic (class AnyKinMeasure and derived) that are basic input to the kinematic measure. This is used only for kinematic measure that combine other measure, but not for AnyKinMeasureReal-derived measures

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.KinMeasureIndexArr:

KinMeasureIndexArr
=====================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="KinMeasureIndexArr">
    <span id="anykinspline-kinmeasureindexarr" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">KinMeasureIndexArr</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#KinMeasureIndexArr" title="Permalink to this headline">¶</a>
    <span class="member-descr">Array of indices of the component of the associated kinematic measure in...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyIntArray`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    Array of indices of the component of the associated kinematic measure in KinMeasureArr that is used.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.nDim:

nDim
=======


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="nDim">
    <span id="anykinspline-ndim" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">nDim</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#nDim" title="Permalink to this headline">¶</a>
    <span class="member-descr">Dimensions of the kinematic measure, i.e., the number of elements in the...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyIntVar`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``0``




    Dimensions of the kinematic measure, i.e., the number of elements in the measure, e.g. the number of elements in the 'Pos' member (when avaialble) and related members.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.RefFrameOutput:

RefFrameOutput
=================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="RefFrameOutput">
    <span id="anykinspline-refframeoutput" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">RefFrameOutput</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#RefFrameOutput" title="Permalink to this headline">¶</a>
    <span class="member-descr">Folder containing data related to all the reference frames that this measure...</span>
    </h3>

..


    | **Class type:**  :ref:`AnyFolder`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``{}``




    Folder containing data related to all the reference frames that this measure depends on. This includes reference frames explicitly given by via members such as 'RefFrames', but also implicit dependecies via for instance surfaces (e.g. from the member 'Surfaces').

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.RefFrameOutput.RefFrameArr:

RefFrameOutput.RefFrameArr
=============================


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="RefFrameOutput.RefFrameArr">
    <span id="anykinspline-refframeoutput-refframearr" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">RefFrameOutput.RefFrameArr</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#RefFrameOutput.RefFrameArr" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    | **Class type:**  :ref:`AnyObjectPtrArray`
    | **Eval moment:** :ref:`ConfigVar <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.RefFrameOutput.Jacobians:

RefFrameOutput.Jacobians
===========================


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="RefFrameOutput.Jacobians">
    <span id="anykinspline-refframeoutput-jacobians" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">RefFrameOutput.Jacobians</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#RefFrameOutput.Jacobians" title="Permalink to this headline">¶</a>
    <span class="member-descr"></span>
    </h3>

..


    | **Class type:**  :ref:`AnyFloat`
    | **Eval moment:** :ref:`VelVar <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    <No description>

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.Pos:

Pos
======


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="Pos">
    <span id="anykinspline-pos" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">Pos</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#Pos" title="Permalink to this headline">¶</a>
    <span class="member-descr">The position vector, i.e., the current values of the measured quantity.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyVector`
    | **Eval moment:** :ref:`PosVar <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    The position vector, i.e., the current values of the measured quantity.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.Vel:

Vel
======


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="Vel">
    <span id="anykinspline-vel" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">Vel</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#Vel" title="Permalink to this headline">¶</a>
    <span class="member-descr">The velocity vector, typically the time-derivative of Pos.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyVector`
    | **Eval moment:** :ref:`VelVar <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    The velocity vector, typically the time-derivative of Pos.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.Acc:

Acc
======


.. raw:: html

    -->

    <div class="html-toggle member-entries odd section collapsed" id="Acc">
    <span id="anykinspline-acc" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">Acc</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#Acc" title="Permalink to this headline">¶</a>
    <span class="member-descr">The acceleration vector, typically the time-derivative of Vel.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyVector`
    | **Eval moment:** :ref:`AccVar <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    The acceleration vector, typically the time-derivative of Vel.

..




..

.. raw:: html

    <!-- Hack to trick sphinx into adding member target link -->
    </div><!--
..

.. _AnyKinSPLine.P:

P
====


.. raw:: html

    -->

    <div class="html-toggle member-entries even section collapsed" id="P">
    <span id="anykinspline-p" style=""></span>
    <h3 class="html-toggle-button" style=""><span class="member-title">P</span><span class="member-title-equal"></span><span class="member-title-default"></span><a class="headerlink" href="#P" title="Permalink to this headline">¶</a>
    <span class="member-descr">Matrix of points of the polyline, i.e., the mesh points.</span>
    </h3>

..


    | **Class type:**  :ref:`AnyMatrix`
    | **Eval moment:** :ref:`Const <InsideAMS_EvalMoments>`
    | **Default:** ``"Dependent"``




    Matrix of points of the polyline, i.e., the mesh points.

..





